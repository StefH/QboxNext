pool:
  vmImage: 'win1803'

variables:
  buildConfiguration: 'Release'
  buildProjectDataReceiver: '**/QboxNext.Server.DataReceiver.csproj'
  buildProjectFrontend: '**/QboxNext.Server.Frontend.csproj'
  imageNameDataReceiver: 'qboxnext-datareceiver-nanoserver-1803'
  imageNameFrontend: 'qboxnext-frontend-nanoserver-1803'
  tag: '1.0.0'
  buildDocker: $(BUILD_DOCKER)

steps:
#- task: DotNetCoreCLI@2
#  displayName: 'Restore and Build'
  #inputs:
   # command: build
    #projects: |
#      $(buildProjectDataReceiver)
#      $(buildProjectFrontend)
    #arguments: '--configuration $(BuildConfiguration)'

#- task: DotNetCoreCLI@2
#  displayName: Test
#  inputs:
#    command: test
#    projects: '$(testProjects)'
#    arguments: '--configuration $(BuildConfiguration)'

#- task: DotNetCoreCLI@2
#  displayName: Publish
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
#  inputs:
#    command: publish
#    projects: $(buildProjects)
#    publishWebProjects: True
#    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#    zipAfterPublish: True

- script: docker build -t $(DOCKER_ID)/$(imageNameFrontend) -f ./src-server/QboxNext.Server.Frontend/Dockerfile.nanoserver-1803 .
  displayName: 'Build Docker image [$(imageNameFrontend)]'
  condition: and(succeeded(), eq(variables.buildDocker, 'yes'))

- script: docker tag $(DOCKER_ID)/$(imageNameFrontend):latest $(DOCKER_ID)/$(imageNameFrontend):$(tag)
  displayName: 'Tag Docker image [$(imageNameFrontend):$(tag)]'
  condition: and(succeeded(), eq(variables.buildDocker, 'yes'))

# for vs2017-win2016 only !
# https://stackoverflow.com/questions/51489359/docker-using-password-via-the-cli-is-insecure-use-password-stdin
# https://github.com/Microsoft/azure-pipelines-tasks/issues/6480#issuecomment-453765536
# echo | set /p="$(DOCKER_PWD)" | docker login --username $(DOCKER_ID) --password-stdin

# For win1803 ; just use --password
- script: |
    docker login --username $(DOCKER_ID) --password $(DOCKER_PWD)
    docker push $(DOCKER_ID)/$(imageNameFrontend):latest
    docker push $(DOCKER_ID)/$(imageNameFrontend):$(tag)
  displayName: 'Push Docker images [$(imageNameDataReceiver) and $(imageNameFrontend)]'
  condition: and(succeeded(), eq(variables.buildDocker, 'yes'))

#- task: PublishBuildArtifacts@1
#  displayName: 'Publish Artifact'
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
#  inputs:
#    PathtoPublish: '$(Build.ArtifactStagingDirectory)'